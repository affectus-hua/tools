[{"id":"409bcac5.3ee164","type":"subflow","name":"Knowledge Base","info":"Inputs:\n Required: msg.query :\n  The Query itself (String or JSON (created from SPARQL.js Parser ONLY!))\n Optional (for query string): msg.mode :\n  FORCE 'select' or 'update' (or 'delete') for SPARQL 1.1\n  Best in Auto Mode...\n Optional: msg.endpoint : Alternate endpoint\nSparql errors are filtered before query is sent to KB.\nOutputs:\n For select: Array of objects\n    Each has key value pairs. Key is variable name\n For update: msg.payload[0] is 'Success' or 'Failure'\n    msg.payload[1] is the message.\n    The rest is up to the server.\n\nMore on:\nSPARQL.js: https://github.com/RubenVerborgh/SPARQL.js/\n ","in":[{"x":60,"y":40,"wires":[{"id":"550a1fef.075cd"}]}],"out":[{"x":1240,"y":440,"wires":[{"id":"abbbb90f.f96d78","port":0},{"id":"9b6037e7.7406b8","port":2},{"id":"e7ffadc6.8a0b","port":0},{"id":"5ca3ebc9.633ff4","port":0},{"id":"e7e236a5.bff4c8","port":2},{"id":"d9f60fa2.0d7b3","port":0}]}]},{"id":"d3ac1de2.7f249","type":"comment","z":"409bcac5.3ee164","name":"Knowledge Base Connector (Final)","info":"","x":580,"y":40,"wires":[]},{"id":"c13d5d1a.c3e37","type":"function","z":"409bcac5.3ee164","name":"SPARQL_Request","func":"//Setup\nconst fetch = context.global.fetch;\nvar SparqlHttp = context.global.sparqlhttp;\nSparqlHttp.fetch = fetch;\n \n//Which endpoint to query, is in msg.endpoint\nvar endpoint = new SparqlHttp({endpointUrl: msg.endpoint});\n\nvar result = null;\n//The SPARQL query itself is in msg.query\n//Run query with promises\nendpoint.selectQuery(msg.query).then(function (res) {\n    return res.text();\n    //Result body of the query\n}).then(function (body) {\n    console.log(\"SPARQL Request Completed!\");\n    // parse the body\n    result = JSON.parse(body);\n    msg.payload = result;\n    node.send(msg);\n//Necessary to catch the error...\n}).catch(function (err) {\n  console.error(err);\n});\n\n\n\n\n","outputs":1,"noerr":0,"x":650,"y":140,"wires":[["abbbb90f.f96d78"]]},{"id":"9ab1ec65.c10c8","type":"function","z":"409bcac5.3ee164","name":"SPARQL_Update","func":"//Setup\nconst fetch = context.global.fetch;\nvar SparqlHttp = context.global.sparqlhttp;\nSparqlHttp.fetch = fetch;\n \n//Which endpoint to query, is in msg.endpoint\nvar endpoint = new SparqlHttp({updateUrl: msg.endpoint});\n\nvar result = null;\n//The SPARQL query itself is in msg.query\n//Run query with promises\nendpoint.updateQuery(msg.query).then(function (res) {\n    return res.text();\n    //Result body of the query\n}).then(function (body) {\n    console.log(\"SPARQL Request Completed!\\n\" + body );\n    msg.payload = body;\n    node.send(msg);\n//Necessary to catch the error...\n}).catch(function (err) {\n  console.error(err);\n});\n","outputs":1,"noerr":0,"x":650,"y":200,"wires":[["e7e236a5.bff4c8"]]},{"id":"abbbb90f.f96d78","type":"function","z":"409bcac5.3ee164","name":"Process Response","func":"//Static Prefixes if prefixes not defined in query.\nconst prefixes = {\"rdf\":\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n\"rdfs\":\"http://www.w3.org/2000/01/rdf-schema#\",\n\"owl\":\"http://www.w3.org/2002/07/owl#\",\n\"\":\"http://www.hua.gr/affectus#\",\n\"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n\"time\":\"http://www.w3.org/2006/time#\",\n\"geojson\":\"https://purl.org/geojson/vocab#\",\n\"#\":\"http://server/unset-base/#\"\n};\n\n//Utility\nconst merge_prefixes = (obj1,obj2) => {\n    var obj3 = {};\n    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }\n    for (attrname in obj2) { obj3[attrname] = obj2[attrname]; }\n    return obj3;\n};\n\nvar allPrefixes = merge_prefixes(prefixes,msg.prefixes);\nvar results = [];\nvar variables = msg.payload.head.vars;\n\n//Utility\nconst isDefined = (variable) => {\n    if (typeof variable === 'undefined' || variable === null || variable === \"\") {\n        return false;\n    } else return true;\n};\n\n//Utility: Fix/Remove the prefixes\nconst prefixFilter = (item) =>{\n    item = item + \"\";\n    pieces = item.split('#');//All standard prefixes end with #\n    for (var prefix in allPrefixes) {\n        if(item.includes(allPrefixes[prefix])) {\n            if (prefix === '' || prefix == '#'){\n                item = \"\";\n            }else item = prefix + \":\";\n            item = item + pieces[pieces.length - 1];\n            break;\n        }\n    }\n    return item;\n};\n\n//Create a clean object.\nconst fixObj = (item, index, arr) => {\n    obj = {};\n    for (i = 0 ; i< variables.length;i++){\n        myVar = variables[i];\n        if(isDefined(item[myVar])){\n            obj[myVar] = prefixFilter(item[myVar].value);\n        }\n    }\n    arr[index] = obj;\n};\n\nmsg.payload = msg.payload.results.bindings;\nmsg.payload.forEach(fixObj);\n\n\nreturn msg;","outputs":1,"noerr":0,"x":1050,"y":160,"wires":[[]]},{"id":"550a1fef.075cd","type":"function","z":"409bcac5.3ee164","name":"Prepare Request","func":"//Utility\nconst isDefined = (variable) => {\n    if (typeof variable === 'undefined' || variable === null || variable === \"\") {\n        return false;\n    } else return true;\n};\n\n//Base query for SPARQL.JS\n//Static Prefixes\nconst prefixes = {\"rdf\":\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n\"rdfs\":\"http://www.w3.org/2000/01/rdf-schema#\",\n\"owl\":\"http://www.w3.org/2002/07/owl#\",\n\"\":\"http://www.hua.gr/affectus#\",\n\"xsd\":\"http://www.w3.org/2001/XMLSchema#\",\n\"time\":\"http://www.w3.org/2006/time#\",\n\"geojson\":\"https://purl.org/geojson/vocab#\",\n\"i\": \"http://server/unset-base/#\"\n};\n//Utility\nconst merge_prefixes = (obj1,obj2) => {\n    var obj3 = {};\n    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }\n    for (attrname in obj2) { obj3[attrname] = obj2[attrname]; }\n    return obj3;\n};\n//Static & mutable for select queries\nconst queryType = \"SELECT\";\n\n//check if query isn't set up\nif(!isDefined(msg.query) ){\n    console.error(\"DEFINE SPARQL QUERY!!!\");\n    msg.error = \"No SPARQL query\";\n    return msg;\n}\nvar type = \"\";\nmsg.prefixes = {};\nconst generator = new context.global.sparqljs.Generator();\n\n//Generate SPARQL from JSON and error filtering.\n//Usable only on queries parsed outside the connector.\nif(typeof msg.query === 'object'){//Input: JSON PARAMETERS.\n    msg.query[\"prefixes\"] = merge_prefixes(prefixes, msg.query.prefixes);\n    for(var prefix in msg.query.prefixes){\n        if(!isDefined(prefixes[prefix])){\n            msg.prefixes[prefix] = msg.query.prefixes[prefix];\n        }\n    }//Fix prefixes!\n    //In msg.query...\n    if(msg.query.type==\"query\"){\n        type = \"query\";\n        //...required Input: type:\"query\", variables:[\"?var0\",...], where[{},{},...]\n        \n    }else if(msg.query.type == \"update\"){\n        type = \"update\";\n        //...required Input: type:\"update\", updates:[{},{}]\n        \n    }\n    msg.query = generator.stringify(msg.query);\n}else if (typeof msg.query  === 'string'){//Input: READY SPARQL QUERY.\n    const prefs = `PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX : <http://www.hua.gr/affectus#> \nPREFIX time: <http://www.w3.org/2006/time#>\nPREFIX geojson: <https://purl.org/geojson/vocab#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX i: <http://server/unset-base/#>`;\n    const parser = new context.global.sparqljs.Parser();//Parse input query\n    msg.query = prefs + msg.query;\n    query = parser.parse(msg.query);\n    if(msg.mode === null || msg.mode === undefined){//Find mode.\n        type = query.type;\n    }\n    for(var prefix in query.prefixes){\n        if(!isDefined(prefixes[prefix])){\n            msg.prefixes[prefix] = query.prefixes[prefix];\n        }\n    }\n    query[\"prefixes\"] = merge_prefixes(prefixes, query.prefixes);\n    msg.query = generator.stringify(query);\n}else{\n    console.error(\"WRONG TYPE FOR SPARQL QUERY!!!\");\n    msg.error = \"Malformed query\";\n    return msg;\n}\n\n//SET MODE!\nif(type == \"query\"){\n    msg.mode = 'select';\n}else if(type == \"update\"){\n    msg.mode = 'update';\n}else{\n    console.error(\"WRONG query Type FOR SPARQL!!!\");\n    msg.error = \"Invalid query Type\";\n    return msg; \n}\n\n//SET SPARQL ENDPOINT\nif(msg.mode == 'select' || msg.mode == 'update'){\n    //check if endpoint is set to a different one\n    if(msg.endpoint === null || msg.endpoint === undefined ){\n        if(msg.mode=='select'){\n            msg.endpoint = \"http://localhost:3030/affectus/sparql\";\n        }else if (msg.mode=='update'){\n            msg.endpoint = \"http://localhost:3030/affectus/update\";\n        }\n    }\n}\nelse{\n    console.error(\"INVALID SPARQL 1.1 Mode!!!\");\n    msg.error = \"SPARQL mode not well defined!\";\n    return msg;\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":250,"y":120,"wires":[["9b6037e7.7406b8"]]},{"id":"9b6037e7.7406b8","type":"switch","z":"409bcac5.3ee164","name":"select or update?","property":"mode","propertyType":"msg","rules":[{"t":"eq","v":"select","vt":"str"},{"t":"eq","v":"update","vt":"str"},{"t":"else"}],"checkall":"true","outputs":3,"x":450,"y":200,"wires":[["c13d5d1a.c3e37"],["9ab1ec65.c10c8"],[]]},{"id":"116ee568.212c8b","type":"catch","z":"409bcac5.3ee164","name":"","scope":null,"x":200,"y":180,"wires":[["7e6a4310.745c8c","d9f60fa2.0d7b3"]]},{"id":"7e6a4310.745c8c","type":"debug","z":"409bcac5.3ee164","name":"","active":true,"console":"false","complete":"true","x":430,"y":280,"wires":[]},{"id":"d9f60fa2.0d7b3","type":"function","z":"409bcac5.3ee164","name":"","func":"console.error(msg.error.message);\nreturn msg;","outputs":1,"noerr":0,"x":430,"y":320,"wires":[[]]},{"id":"e7ffadc6.8a0b","type":"html","z":"409bcac5.3ee164","name":"parse response","tag":"h1,p","ret":"text","as":"single","x":1060,"y":200,"wires":[[]]},{"id":"e7e236a5.bff4c8","type":"switch","z":"409bcac5.3ee164","name":"","property":"payload","propertyType":"msg","rules":[{"t":"cont","v":"<html>","vt":"str"},{"t":"cont","v":"Error","vt":"str"},{"t":"else"}],"checkall":"true","outputs":3,"x":810,"y":200,"wires":[["e7ffadc6.8a0b"],["5ca3ebc9.633ff4"],[]]},{"id":"5ca3ebc9.633ff4","type":"function","z":"409bcac5.3ee164","name":"process response","func":"msg.payload = msg.payload.split(\"\\n\").filter( word => word!==\"\");\nreturn msg;","outputs":1,"noerr":0,"x":1050,"y":240,"wires":[[]]},{"id":"e76f8aae.095048","type":"tab","label":"ExtDevUI","disabled":false,"info":""},{"id":"f3ab75cd.481118","type":"ui_dropdown","z":"e76f8aae.095048","name":"Protocol","label":"","place":"Protocol","group":"dc83e135.bd292","order":1,"width":"6","height":"1","passthru":true,"options":[{"label":"","value":"","type":"str"}],"payload":"","topic":"","x":400,"y":720,"wires":[["ca2ff98a.e607f8"]]},{"id":"4d590c39.cd4404","type":"inject","z":"e76f8aae.095048","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"x":110,"y":720,"wires":[["dbea9cf8.e21cd"]]},{"id":"dbea9cf8.e21cd","type":"function","z":"e76f8aae.095048","name":"Options","func":"//needs to be taken from REST API of EVRYTHNG\n\n//how to enable it dynamically?\nmsg.options=[ \"HTTP POST\", \"HTTP GET\", \"AMQP\", \"MQTT\", \"WebSocket\" ];\nmsg.payload=undefined;\n\nreturn msg;","outputs":1,"noerr":0,"x":260,"y":720,"wires":[["f3ab75cd.481118"]]},{"id":"ca2ff98a.e607f8","type":"function","z":"e76f8aae.095048","name":"set","func":"flow.set(\"protocol\",msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":530,"y":720,"wires":[[]]},{"id":"f331d8ca.0b5708","type":"ui_text_input","z":"e76f8aae.095048","name":"Define Endpoint","label":"Endpoint","group":"dc83e135.bd292","order":3,"width":"6","height":"1","passthru":true,"mode":"text","delay":"100","topic":"","x":260,"y":780,"wires":[["9614c3d.817744"]]},{"id":"9614c3d.817744","type":"function","z":"e76f8aae.095048","name":"set","func":"flow.set(\"endpoint\",msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":530,"y":760,"wires":[[]]},{"id":"87ed96e0.4ef518","type":"debug","z":"e76f8aae.095048","name":"","active":true,"console":"false","complete":"true","x":910,"y":400,"wires":[]},{"id":"34eedb77.72c2b4","type":"ui_button","z":"e76f8aae.095048","name":"Submit","group":"3229ec93.a9d434","order":1,"width":0,"height":0,"passthru":false,"label":"Submit Triples","color":"","bgcolor":"","icon":"","payload":"","payloadType":"str","topic":"","x":80,"y":540,"wires":[["a10f4156.51b3b"]]},{"id":"36f9533.02474ac","type":"function","z":"e76f8aae.095048","name":"add to triple","func":"/* #Query Template\nINSERT DATA {\n    :MyTempID4  a :EventCondition;\n            :isForType :Temperature;\n            :publishedAt <http://example.org>;\n            :hasexternalInputs <http://example2.org>;\n            :isAscending    \"true\"^^xsd:boolean;\n            :isDerivedFrom  \"http://example.address.com\"^^xsd:anyURI;\n            :isMeasuredIn   \"Celcius\"^^xsd:string;\n            :hasState       :MyConditionStateID0\n            .\n    :MyConditionStateID0 a  :EventConditionState;\n        :hasStateParameter  :MyStateParameterID0\n        .\n    :MyConditionStateID0 a  :EventConditionStateParam;\n        :hasMinValue        15.3;\n        :hasMaxValue        1000;\n        :hasMeanValue       20\n        .\n}\n*/\nif(msg.emptyEverything) return msg;\n\n//Triples Array\nvar triples=[];\n//Utility for triples.\nconst addTriple = (triple,visible) => {\n    triples.push({\"triple\":triple, \"visible\":visible});\n};\n\n//Standard triples from UI.\naddTriple(\"i:\"+flow.get(\"eventConditionName\")+\" a :EventCondition\",false);\naddTriple(\"i:\"+flow.get(\"eventConditionName\")+\" :isForType :\"+flow.get(\"EventType\"),true);\naddTriple(\"i:\"+flow.get(\"eventConditionName\")+\" :publishedAt <\"+flow.get(\"endpoint\")+\"> \",true);\naddTriple(\"i:\"+flow.get(\"eventConditionName\")+\" :hasExternalInputs i:\"+flow.get(\"externalinput\")+\" \",true);\naddTriple(\"i:\"+flow.get(\"eventConditionName\")+\" :isAscending \\\"\"+flow.get(\"isAscending\")+\"\\\"^^xsd:boolean\",true);\nif(flow.get(\"isDerivedFrom\")) addTriple(\"i:\"+flow.get(\"eventConditionName\")+\" :isDerivedFrom <\"+flow.get(\"isDerivedFrom\")+\"> \",true);\naddTriple(\"i:\"+flow.get(\"eventConditionName\")+\" :isMeasuredIn i:\"+flow.get(\"isMeasuredIn\")+\" \",true);\n//Triples from JSON Schema.\nvar statesSchema = flow.get(\"statesSchema\");\nfor(var i=0 ; i< statesSchema.length; i++){//For every state...\n    addTriple(\"i:\"+flow.get(\"eventConditionName\")+\" :hasState i:\"+statesSchema[i].stateName+\" \",false);\n    addTriple(\"i:\"+statesSchema[i].stateName+\" a :EventConditionState\",false);\n    for(var j=0; j< statesSchema[i].stateParams.length;j++){//For every Parameter of every state.//WRONG SELECTIONS FIX!!!!\n        addTriple(\"i:\"+ statesSchema[i].stateParams[j].clusterParameterName+\" a :EventConditionStateParam\",false );\n        addTriple(\"i:\"+ statesSchema[i].stateName +\" :hasStateParameter i:\"+statesSchema[i].stateParams[j].clusterParameterName+\" \",false );\n        addTriple(\"i:\"+statesSchema[i].stateParams[j].clusterParameterName+\" :hasMinValue \"+statesSchema[i].stateParams[j].min , false );\n        addTriple(\"i:\"+statesSchema[i].stateParams[j].clusterParameterName+\" :hasMaxValue \"+statesSchema[i].stateParams[j].max , false);\n        if(statesSchema[i].stateParams[j].average)\n            addTriple(\"i:\"+statesSchema[i].stateParams[j].clusterParameterName+\"> :hasMeanValue \"+statesSchema[i].stateParams[j].average ,false );\n    }\n}\n//Utility for making the triples printable!\nconst printableTriples = (triples) =>{\n    prStr = 'Triples from UI:<br><ul style=\"list-style-type:square\">';\n    for(var i=0;i<triples.length;i++){//For each triple.\n        if(triples[i].visible){\n            //Make them readable\n            prTriple = triples[i].triple.replace(/ :/g,\" \");\n            prTriple = prTriple.replace(/<#/g,\"\");\n            prTriple = prTriple.replace(/>/g,\"\");\n            prTriple = prTriple.replace(/</g,\"\");\n            prTriple = prTriple.replace(/ #/g,\" \");\n            prTriple = prTriple.replace(/i:/g,\" \");\n            prStr = prStr + \"<li>\" + prTriple + \"</li>\";\n        }\n    }\n    prStr = prStr.replace(\"^^xsd:boolean\",\"\");\n    prStr = prStr + '</ul><br> The following JSON States Schema is to be submitted: <p style=\"max-width: 300px;\">'+\n        JSON.stringify(flow.get(\"statesSchema\"),undefined,2) + \"</p>\";\n    return prStr;\n};\n\nmsg.payload=printableTriples(triples);\nconsole.log(triples);\nflow.set(\"triples\",triples);\nreturn msg;","outputs":1,"noerr":0,"x":650,"y":380,"wires":[["87ed96e0.4ef518","79bcc6a.d90ff38"]]},{"id":"3bbc18d9.167098","type":"ui_dropdown","z":"e76f8aae.095048","name":"EventSemantics","label":"Select Event Type","place":"Select Event Type","group":"f5f162b8.4af87","order":3,"width":0,"height":0,"passthru":true,"options":[{"label":"Humidity","value":"Humidity","type":"str"},{"label":"Temperature","value":"Temperature","type":"str"},{"label":"Social Networks","value":"Social Networks","type":"str"},{"label":"Luminocity","value":"Luminocity","type":"str"},{"label":"Precipitation","value":"Precipitation","type":"str"}],"payload":"","topic":"","x":420,"y":20,"wires":[["e4dc0515.3dbf08"]]},{"id":"1e375f2c.f58fc1","type":"ui_text_input","z":"e76f8aae.095048","name":"","label":"Define EventCondition name","group":"f5f162b8.4af87","order":1,"width":0,"height":0,"passthru":true,"mode":"text","delay":300,"topic":"","x":140,"y":20,"wires":[["792c0255.f3638c"]]},{"id":"792c0255.f3638c","type":"function","z":"e76f8aae.095048","name":"set","func":"flow.set(\"eventConditionName\",msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":390,"y":100,"wires":[[]]},{"id":"e4dc0515.3dbf08","type":"function","z":"e76f8aae.095048","name":"set","func":"flow.set(\"EventType\",msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":530,"y":100,"wires":[[]]},{"id":"1713c45c.099fac","type":"ui_dropdown","z":"e76f8aae.095048","name":"Externalsources","label":"External Source Used","place":"External Source Used","group":"f5f162b8.4af87","order":4,"width":0,"height":0,"passthru":true,"options":[{"label":"","value":"Twitter","type":"str"},{"label":"","value":"Facebook","type":"str"},{"label":"","value":"Youtube","type":"str"},{"label":"","value":"Openweather","type":"str"},{"label":"","value":"Wunderground","type":"str"},{"label":"","value":"Darksky","type":"str"},{"label":"None (only external uri)","value":"None","type":"str"}],"payload":"","topic":"","x":120,"y":80,"wires":[["49360392.a2099c"]]},{"id":"49360392.a2099c","type":"function","z":"e76f8aae.095048","name":"set","func":"flow.set(\"externalinput\",msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":390,"y":140,"wires":[[]]},{"id":"50bfc186.3d373","type":"ui_switch","z":"e76f8aae.095048","name":"","label":"is Ascending","group":"f5f162b8.4af87","order":8,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","x":110,"y":140,"wires":[["2ef0986e.3e2428"]]},{"id":"2ef0986e.3e2428","type":"function","z":"e76f8aae.095048","name":"set","func":"flow.set(\"isAscending\",msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":390,"y":180,"wires":[[]]},{"id":"79bcc6a.d90ff38","type":"ui_text","z":"e76f8aae.095048","group":"3229ec93.a9d434","order":2,"width":"8","height":"10","name":"","label":"Triples for submission","format":"{{msg.payload}}","layout":"row-center","x":960,"y":360,"wires":[]},{"id":"3c8ccecb.0e89b2","type":"ui_button","z":"e76f8aae.095048","name":"Check submission","group":"713c46c6.8eb4f8","order":1,"width":0,"height":0,"passthru":false,"label":"Check submission","color":"","bgcolor":"","icon":"","payload":"","payloadType":"str","topic":"","x":130,"y":440,"wires":[["211cdc91.8b3334"]]},{"id":"8473bf23.6cdf3","type":"function","z":"e76f8aae.095048","name":"set","func":"flow.set(\"isDerivedFrom\",msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":390,"y":240,"wires":[[]]},{"id":"7af3c3d5.9b84ec","type":"ui_text","z":"e76f8aae.095048","group":"713c46c6.8eb4f8","order":2,"width":"8","height":"10","name":"","label":"Generic Check State","format":"{{msg.payload}}","layout":"row-center","x":1320,"y":420,"wires":[]},{"id":"211cdc91.8b3334","type":"function","z":"e76f8aae.095048","name":"check","func":"//Type: Preparation/Error checker...\nconst context = this.context;\n\n//Check query, #$#x are replaceable. idExpr is extra Identifying Expression.\n//?check is the individual to be checked.\nconst existQuery  = (owlclass, name, idExpr) => {\n    var query = `\n    SELECT (count(distinct ?check) as ?count)\n    WHERE{\n        ?check a :#$#1 . FILTER( ?check =  i:#$#2 )\n        #$#3\n    }\n    `;\n    query = query.replace(\"#$#1\",owlclass);\n    query = query.replace(\"#$#2\",name);\n    if(idExpr === \"\" || idExpr === null || idExpr === undefined){\n        query = query.replace(\"#$#3\",\"\");\n    }else query = query.replace(\"#$#3\",idExpr+\".\");\n    return query;\n};\n\n//Utility\nconst isDefined = (variable) => {\n    if (typeof variable === 'undefined' || variable === null || variable === \"\") {\n        return false;\n    } else return true;\n};\n\n\nconst errors = {\n    \"eventConditionName\":\"No name specified for Event Condition.\",\n    \"EventType\":\"No type specified for Event Condition.\",\n    \"hasTimestamp\": \"Events with no timestamp or location can not be correlated and thus are of no interest.\",\n    \"hasLocation\" : \"Events with no timestamp or location can not be correlated and thus are of no interest.\",\n    \"externalinput\" : \"External Source has to be Defined!\",\n    \"isMeasuredIn\" : \"Measurement Unit Representation is essential for processing!\",\n    \"isDerivedFrom\" : \"No external source is used, define the URI the external event is derived from!\",\n    \"statesSchema\" : \"A Valid JSON Schema for Event Condition States is required!\",\n    \"protocol\" : \"The protocol for the endpoint has to be defined!\",\n    \"endpoint\" : \"Define the endpoint to which the event is sent to!\"\n};\n\n\nflow.set(\"readySubmit\",false);\nvar ready = true;\nmsg.addTripples =  false;\n\n//Error Check...\nvar locationTime = true;\nvar sources = true;\nmsg.payload = 'Errors/Required Fileds:<br><ul style=\"list-style-type:square\">';\nfor(var field in errors){\n    if(!isDefined(flow.get(field))){//Check the fields that need to be defined!\n        console.log(\"Not Defined: \"+field);\n        if(field === \"isDerivedFrom\") if(sources === true) continue;//Is essential only in special circumstance.\n        ready = false ;\n        msg.payload = msg.payload +\" <li>\" + errors[field]+\"</li>\";\n    }\n    //For Combined Fields...\n    if(field === \"hasTimestamp\" || field ===  \"hasLocation\" ){//Correlation...\n        if(flow.get(field) === false){\n            if (locationTime === true){\n                locationTime = false;\n            }else{\n                ready = false;\n                msg.payload = msg.payload +\" <li>\" + errors[field]+\"</li>\";\n            }\n        }\n    }\n    if(field === \"externalinput\" && flow.get(field) === \"None\") sources = false;//The extra uri becomes mandatory.\n}\nmsg.payload = msg.payload + \"</ul>\";\n\n//Input Types (For future?)\n\nif(ready === false){\n    node.send({addTripples : true, emptyEverything : true,payload:\"\"});\n    return msg;\n} \n\n//When no errors...\nif (ready === true){\n    msg.payload = \"\";\n    console.log(\"ready\");\n\n    //Signal triples preparation\n    msg.addTripples = true;\n    node.send(RED.util.cloneMessage(msg));\n    delete msg.addTripples;\n    \n//QUERY KB for the case of ovewriting something\n//or creating something new for another idividual that exists...\n    queryArray = [];\n    tempQuery = {};\n    //Send messages for multiple checks\n    //msg.initial = true;\n    tempQuery.query =  existQuery (\"EventCondition\",flow.get(\"eventConditionName\"),null);\n    tempQuery.EventCondition= flow.get(\"eventConditionName\");\n    queryArray.push(tempQuery);\n    //node.send(RED.util.cloneMessage(msg));\n    //delete msg.initial;\n    //delete msg.EventCondition;\n    \n    //Go through JSON SCHEMA...\n    statesSchema = flow.get(\"statesSchema\");\n    for(var i=0;i<statesSchema.length; i++){//CHECK!!!\n        tempQuery = {};\n        //expr = \"i:\"+flow.get(\"eventConditionName\")+\" :hasState ?check\" ;//SPARQL Extra EXPRESSION\n        tempQuery.query = existQuery (\"EventConditionState\",statesSchema[i].stateName, null);\n        tempQuery.EventConditionState = statesSchema[i].stateName;\n        queryArray.push(tempQuery);\n        //node.send(RED.util.cloneMessage(msg));\n        //delete msg.EventConditionState;\n        \n        for(var j =0; j<statesSchema[i].stateParams.length;j++ ){\n            tempQuery = {};\n            //expr = \"i:\"+flow.get(\"eventConditionName\")+\" :hasState ?check\" ;//SPARQL EXPRESSION\n            tempQuery.query = existQuery (\"EventConditionStateParam\", statesSchema[i].stateParams[j].clusterParameterName, null);\n            tempQuery.EventConditionStateParam = statesSchema[i].stateParams[j].clusterParameterName;\n            queryArray.push(tempQuery);\n            //node.send(RED.util.cloneMessage(msg));\n            //delete msg.EventConditionStateParam;\n        }\n        \n    }\n    //delete msg.query;\n    //msg.final = true;\n    msg.payload = queryArray;\n    node.send(msg);\n}\n\n","outputs":1,"noerr":0,"x":290,"y":440,"wires":[["a1cf6d75.dc43a"]],"inputLabels":["Check Button"]},{"id":"44e81f30.df127","type":"http in","z":"e76f8aae.095048","name":"UPDATE STATE SCHEMA","url":"/stateupdate","method":"post","upload":false,"swaggerDoc":"","x":370,"y":1100,"wires":[["ac0c2913.b17e58"]]},{"id":"a10f4156.51b3b","type":"function","z":"e76f8aae.095048","name":"process schema and UPDATE KB","func":"//Type:Updater\n\n//!Add stuff to already existent...\nconst deleteQuery = (deleteArray) =>{//INCOMPLETE, ONLY FOR LATER...\n    query = `\n    DELETE{\n\t    i:#$#1\n    }\n    `;\n    body = `\n        i:#$#1 ?p1 ?v.\n\t    ?o ?p2 i:#$#1.\n    `;\n    \n};\n//CAREFUL!!! DELETE HAS TO BE SEPARATE... (Future Rewrite thing...)\n\n//Insert query, #$#x are replaceable.\nconst insertQuery  = (triplesArray) => {\n    query = `\n    INSERT DATA{\n        #$#triples\n    }`;\n    triplesStr = \"\";\n    for(var i=0;i<triplesArray.length; i++){\n        triplesStr = triplesStr + triplesArray[i].triple+\".\\n\";\n    }\n    query = query.replace(\"#$#triples\",triplesStr);\n    return query;\n};\n\nvar readySubmit = false;\nreadySubmit = flow.get(\"readySubmit\");\n\n/*//For overwrite (Future)\noverwrite = flow.get(\"overwrite\");\nvar deleteArray = [];\ndeleteArray.concat(overwrite.EC,overwrite.ECState,overwrite.ECStateParam);//??\n*/\nif(readySubmit){\n    msg.query = \"\"+ /* deleteQuery(deleteArray) +*/ insertQuery(flow.get(\"triples\"));//Future\n}else{\n    msg.error = {};\n    msg.error.message = \"Not Ready to Submit yet!\";\n} \n\nreturn msg;","outputs":1,"noerr":0,"x":300,"y":540,"wires":[["a36df145.adde7","7c880f8.6850af"]]},{"id":"a4af2416.988758","type":"json","z":"e76f8aae.095048","name":"JSON Description","pretty":false,"x":570,"y":920,"wires":[["65301c24.0b41c4"]]},{"id":"a97a064a.6c3d58","type":"ui_text","z":"e76f8aae.095048","group":"3229ec93.a9d434","order":0,"width":0,"height":0,"name":"","label":"Status","format":"{{msg.payload}}","layout":"row-spread","x":1030,"y":540,"wires":[]},{"id":"215b792a.ae0e06","type":"comment","z":"e76f8aae.095048","name":"Endpoint Protocol","info":"","x":690,"y":720,"wires":[]},{"id":"8278ff4b.b8e9d","type":"comment","z":"e76f8aae.095048","name":"ENDPOINT","info":"-Protocol\n-Endpoint Address\n-JSON States Schema","x":90,"y":660,"wires":[]},{"id":"c8217734.dd3c68","type":"comment","z":"e76f8aae.095048","name":"Endpoint Address","info":"","x":690,"y":760,"wires":[]},{"id":"3be2fdec.ac38c2","type":"catch","z":"e76f8aae.095048","name":"Not Valid JSON","scope":["a4af2416.988758"],"x":580,"y":880,"wires":[["81ebdb24.a1ad48"]]},{"id":"65301c24.0b41c4","type":"function","z":"e76f8aae.095048","name":"Validate & Analyse JSON","func":"var message = \"\";\nif ( typeof(msg.payload) !== 'object'){\n    msg.error={};\n    msg.error.message = \"Not JSON!\";\n    return msg;\n}\nvar v = new context.global.jsonschema.Validator();\n//Making schema based on examples... https://github.com/tdegrunt/jsonschema/blob/master/examples/all.js\n//States Schema can be embedded on  EventCondition!\n\nconst statesSchema = {\n\t    \"id\": \"/EventConditionState\",\n\t    \"type\": \"array\",\n\t    \"minItems\": 1,\n\t    \"items\" : {\n\t        \"type\" : \"object\",\n\t        \"properties\": {\n\t\t        \"stateName\" : {\"type\": \"string\"},\n\t\t        \"stateParams\" : {\n\t\t            \"type\" : \"array\",\n\t\t            \"minItems\" : 1,\n\t\t            \"items\" : {\n\t\t                \"type\" : \"object\",\n\t\t                \"properties\" : {\n\t\t                    \"clusterParameterName\" : {\"type\" : \"string\"},\n\t\t                    \"min\": { \"type\" : \"number\"},\n\t\t                    \"max\": { \"type\" : \"number\"},\n\t\t                    \"average\": {\"type\": \"number\"}\n\t\t                },\n\t\t                \"required\": [\"clusterParameterName\"]\n\t\t            }\n\t\t        }\n    \t    },\n\t        \"required\":[\"stateName\",\"stateParams\"]\n        }\n    };\n\n\nif(msg.origin == \"ExtDevUI\"){\n    var schema = statesSchema;\n} else{\n    var schema = {\n\t    \"id\": \"/EventCondition\",\n\t    \"type\": \"object\",\n\t    \"properties\": {\n\t\t    \"eventConditionName\" : {\"type\": \"string\"},\n\t\t    \"states\":{\"$ref\" : \"/EventConditionState\"},\n\t\t    \"eventType\": { \"enum\": \n\t\t    \t[\n\t\t\t     \t\"Humidity\",\n\t\t\t\t    \"Luminocity\",\n\t\t\t\t    \"Precipitation\",\n\t\t\t\t    \"SocialNetwork\",\n\t\t\t        \"Temperature\"\n\t\t\t    ]\n\t\t    },\n\t\t        \"isDerivedFrom\": {\n\t\t\t    \"type\": \"string\",\n\t\t\t    \"format\": \"uri\"\n\t\t    },\n\t\t    \"isAscending\" : {\"type\": \"boolean\"},\n\t\t    \"isMeasuredIn\" : {\"type\": \"string\"},\n\t\t    \"endpoint\" : {\n\t\t\t    \"type\": \"string\",\n\t\t    \t\"format\": \"uri\"\n\t    \t}\n    \t},\n\t\"required\" : [\"eventConditionName\",\"states\",\"eventType\",\"isAscending\",\"endpoint\"]\n    };\n}\n\nv.addSchema(statesSchema, '/EventConditionState');\nmsg.validation = v.validate(msg.payload, schema);\nif(msg.validation.errors.length > 0){\n    msg.error={};\n    str=\"\";\n    for (i=0; i < msg.validation.errors.length; i++){\n        str = str +\" \"+ msg.validation.errors[i].stack+\",\";\n    }\n    msg.error.message=str;\n} \nreturn msg;","outputs":1,"noerr":0,"x":810,"y":940,"wires":[["96e79899.9cfe28","23e24591.4ba14a"]]},{"id":"ac0c2913.b17e58","type":"function","z":"e76f8aae.095048","name":"origin","func":"msg.sess = \"def\";//change to some form of session!\nmsg.origin = \"POST /stateupdate\"\nreturn msg;","outputs":1,"noerr":0,"x":670,"y":1100,"wires":[[]]},{"id":"96e79899.9cfe28","type":"debug","z":"e76f8aae.095048","name":"","active":true,"console":"false","complete":"true","x":890,"y":1020,"wires":[]},{"id":"f97e2014.58401","type":"comment","z":"e76f8aae.095048","name":"/stateupdate","info":"","x":330,"y":1140,"wires":[]},{"id":"544819e5.930fa8","type":"http response","z":"e76f8aae.095048","name":"Response","statusCode":"","headers":{},"x":1500,"y":1180,"wires":[]},{"id":"23e24591.4ba14a","type":"switch","z":"e76f8aae.095048","name":"valid?","property":"error","propertyType":"msg","rules":[{"t":"nnull"},{"t":"else"}],"checkall":"true","outputs":2,"x":990,"y":940,"wires":[["81ebdb24.a1ad48"],["b92917dd.8b8158"]]},{"id":"81ebdb24.a1ad48","type":"function","z":"e76f8aae.095048","name":"error","func":"msg.payload = \"ERROR! \"+ msg.error.message ;\nflow.set(\"statesSchema\",undefined);\nreturn msg;","outputs":1,"noerr":0,"x":1110,"y":900,"wires":[["48c88e1d.c1059"]]},{"id":"48c88e1d.c1059","type":"switch","z":"e76f8aae.095048","name":"destination","property":"origin","propertyType":"msg","rules":[{"t":"else"},{"t":"eq","v":"POST /stateupdate","vt":"str"}],"checkall":"true","outputs":2,"x":1310,"y":920,"wires":[["68befde9.b29044"],[]]},{"id":"b92917dd.8b8158","type":"function","z":"e76f8aae.095048","name":"set for flow","func":"flow.set(\"statesSchema\",msg.payload);\nmsg.payload = \"Valid Schema\";\nreturn msg;","outputs":1,"noerr":0,"x":1130,"y":960,"wires":[["48c88e1d.c1059"]]},{"id":"68befde9.b29044","type":"ui_text","z":"e76f8aae.095048","group":"dc83e135.bd292","order":9,"width":"6","height":"1","name":"States schema check","label":"Schema Validity:","format":"{{msg.payload}}","layout":"row-left","x":1500,"y":900,"wires":[]},{"id":"e0ed55d6.c7c4a8","type":"inject","z":"e76f8aae.095048","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":140,"y":1920,"wires":[["93d211c2.56829"]]},{"id":"d63e29c7.d67b78","type":"debug","z":"e76f8aae.095048","name":"","active":true,"console":"false","complete":"false","x":490,"y":1920,"wires":[]},{"id":"93d211c2.56829","type":"function","z":"e76f8aae.095048","name":"last state schema","func":"msg.payload = flow.get(\"statesSchema\");\nreturn msg;","outputs":1,"noerr":0,"x":310,"y":1920,"wires":[["d63e29c7.d67b78"]]},{"id":"6ec082e4.e6d7bc","type":"ui_text","z":"e76f8aae.095048","group":"dc83e135.bd292","order":5,"width":"6","height":"1","name":"States schema title","label":"Declare States Schema in JSON Below","format":"","layout":"row-center","x":290,"y":660,"wires":[]},{"id":"9049f360.c27e3","type":"function","z":"e76f8aae.095048","name":"origin","func":"msg.sess = \"def\";//change to some form of session!\nmsg.origin = \"ExtDevUI\"\nif (msg.payload===\"\" || msg.payload === null || msg.payload === undefined) msg.empty=\"\";\nreturn msg;","outputs":1,"noerr":0,"x":310,"y":820,"wires":[["a7c9e0fa.aae02"]]},{"id":"a7c9e0fa.aae02","type":"switch","z":"e76f8aae.095048","name":"empty","property":"empty","propertyType":"msg","rules":[{"t":"nnull"},{"t":"else"}],"checkall":"true","outputs":2,"x":430,"y":820,"wires":[["6d1d08b8.b96998"],["a4af2416.988758"]]},{"id":"6d1d08b8.b96998","type":"function","z":"e76f8aae.095048","name":"empty","func":"msg.payload = \"EMPTY\";\nreturn msg;","outputs":1,"noerr":0,"x":1110,"y":820,"wires":[["48c88e1d.c1059"]]},{"id":"2cb2d72c.8d3938","type":"function","z":"e76f8aae.095048","name":"prepare kb ","func":"if (msg.payload === \"Valid Schema\") msg.payload = flow.get(\"statesSchema\");\n\n\n\nreturn msg;","outputs":1,"noerr":0,"x":1110,"y":1100,"wires":[["19ab7a00.e86856"]]},{"id":"e7a883.66e5478","type":"comment","z":"e76f8aae.095048","name":"TEST FLOWS","info":"","x":130,"y":1860,"wires":[]},{"id":"1a2f737b.95c8fd","type":"comment","z":"e76f8aae.095048","name":"API Response","info":"","x":1160,"y":780,"wires":[]},{"id":"19ab7a00.e86856","type":"subflow:409bcac5.3ee164","z":"e76f8aae.095048","name":"","x":1310,"y":1100,"wires":[["20df7c44.70dbf4"]]},{"id":"20df7c44.70dbf4","type":"function","z":"e76f8aae.095048","name":"Prepare Response","func":"\nreturn msg;","outputs":1,"noerr":0,"x":1510,"y":1100,"wires":[["544819e5.930fa8"]]},{"id":"a36df145.adde7","type":"subflow:409bcac5.3ee164","z":"e76f8aae.095048","name":"","x":570,"y":540,"wires":[["7af17f4.e53b28"]]},{"id":"ca352fd0.19e14","type":"ui_text_input","z":"e76f8aae.095048","name":"","label":"Event is derived from [full URI]","group":"f5f162b8.4af87","order":5,"width":"6","height":"1","passthru":true,"mode":"text","delay":"700","topic":"","x":170,"y":200,"wires":[["8473bf23.6cdf3"]]},{"id":"48df35da.f1e7cc","type":"ui_text_input","z":"e76f8aae.095048","name":"","label":"Is  measured in [measurement unit]","group":"f5f162b8.4af87","order":6,"width":"6","height":"1","passthru":true,"mode":"text","delay":"700","topic":"","x":180,"y":260,"wires":[["dbf85995.1f1a08"]]},{"id":"dbf85995.1f1a08","type":"function","z":"e76f8aae.095048","name":"set","func":"flow.set(\"isMeasuredIn\",msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":390,"y":280,"wires":[[]]},{"id":"8e6ac33d.a4206","type":"ui_switch","z":"e76f8aae.095048","name":"","label":"has Location","group":"f5f162b8.4af87","order":9,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","x":170,"y":320,"wires":[["90a4b678.5926a8"]]},{"id":"90a4b678.5926a8","type":"function","z":"e76f8aae.095048","name":"set","func":"flow.set(\"hasLocation\",msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":390,"y":320,"wires":[[]]},{"id":"687b517c.00789","type":"ui_switch","z":"e76f8aae.095048","name":"","label":"has Timestamp","group":"f5f162b8.4af87","order":10,"width":0,"height":0,"passthru":true,"decouple":"false","topic":"","style":"","onvalue":"true","onvalueType":"bool","onicon":"","oncolor":"","offvalue":"false","offvalueType":"bool","officon":"","offcolor":"","x":180,"y":380,"wires":[["2a23a5b3.a7fa7a"]]},{"id":"2a23a5b3.a7fa7a","type":"function","z":"e76f8aae.095048","name":"set","func":"flow.set(\"hasTimestamp\",msg.payload);\nreturn msg;","outputs":1,"noerr":0,"x":390,"y":360,"wires":[[]]},{"id":"7af17f4.e53b28","type":"function","z":"e76f8aae.095048","name":"Response from KB, final screen","func":"if(msg.error){\n    msg.payload = msg.error.message;\n    return msg;\n}\n\nif (msg.payload[0]==\"Success\"){\n    msg.successful = true;\n    msg.payload = \"KB Update successful! Your choices have been submitted\";\n    flow.set(\"triples\",undefined);\n}else{\n    msg.payload = \"KB Update Unsuccessful, \"+ msg.payload[1];\n}\nreturn msg;","outputs":1,"noerr":0,"x":810,"y":540,"wires":[["a97a064a.6c3d58"]]},{"id":"7c880f8.6850af","type":"debug","z":"e76f8aae.095048","name":"","active":true,"console":"false","complete":"true","x":530,"y":580,"wires":[]},{"id":"22892a7a.4ccd36","type":"subflow:409bcac5.3ee164","z":"e76f8aae.095048","name":"","x":750,"y":460,"wires":[["55e7ed2a.156464"]]},{"id":"82417868.05a4c8","type":"function","z":"e76f8aae.095048","name":"Set Updates","func":"//Type:Gatherer\n\n//Utility\nconst isDefined = (variable) => {\n    if (typeof variable === 'undefined' || variable === null || variable === \"\") {\n        return false;\n    } else return true;\n};\n\n//Check which variables are new and which are updated or have updated elements...\nvar ECNew = true;//context.get(\"ECNew\");\nvar ECSNew = true;//context.get(\"ECSNew\");\n/*\n//Initialization Block\nif(msg.initial){//When first message arrives.\n    console.log(\"Initial\");\n    context.set( \"EventCondition\", null);\n    context.set( \"EventConditionState\", []);\n    context.set( \"EventConditionStateParam\", []);\n}\n*/\nvar EventCondition = {};//context.get(\"EventCondition\");\nvar EventConditionState = [];//context.get( \"EventConditionState\");\nvar EventConditionStateParam = [];//context.get( \"EventConditionStateParam\");\n//For each result!\nfor(var i=0;i<msg.payload.length;i++){\n    var count = null;\n    if(isDefined(msg.payload[i])) {\n        if(isDefined(msg.payload[i].results[0].count)){\n            count = parseInt(msg.payload[i].results[0].count);\n            console.log(\"Query:\\n\"+ msg.payload[i].query +\" has Count: \"+ count);\n            //msg.payload = \"All input seems to be in order!\";\n            //return msg;//JUST TO LET IT WORK...\n        }else{//If error and not final, skip...\n            msg.payload = \"Errors on duplicate check! Couldn't obtain count!\";\n            return msg;\n        }\n    }else{\n        msg.payload = \"Errors on duplicate check! Couldn't query KB!\";\n        return msg;\n    }\n    console.log(\"Check: \"+ msg.payload[i].EventCondition);\n    //Cases (New or Update?)\n    //EventCondition Block\n    if(isDefined(msg.payload[i].EventCondition)){\n        //Set isNew based on the query results.\n        \n        ECNew = true;\n        if(count>0) ECNew = false;\n        EC = {};\n        EC.name = msg.payload[i].EventCondition;\n        EC.isNew = ECNew;\n        EventCondition=EC;//For Messages\n        console.log(\"Checked EventCondition: \"+ EventCondition);\n        //context.set(\"ECNew\",ECNew);//Node keeps the state.\n    }\n    //StatesSchema\n    //EventConditionState Block\n    if(isDefined(msg.payload[i].EventConditionState)){\n        ECSNew = true;\n        if(count>0) ECSNew = false;\n        ECS = {};\n        elseWhere = false;\n        //Is EventCondition New or Not?\n        if(count>0 && ECNew ===true){//New for the event condition, but same name exists on other event condition.\n             elseWhere = true;\n        }\n        ECS.name = msg.payload[i].EventConditionState;\n        ECS.isNew = ECSNew;\n        ECS.duplicateElseWhere = elseWhere;\n        //console.log(\"Checked EventConditionState: \"+ ECS);\n        EventConditionState.push(ECS);//For Messages\n        //context.set(\"ECSNew\",ECNew);//Node keeps the state.\n    }\n    //StatesSchema\n    //EventConditionStateParam Block\n    if(isDefined(msg.payload[i].EventConditionStateParam)){\n        ECSPNew = true;\n        if(count>0) ECSPNew = false;\n        ECSP = {};\n        elseWhere = false;\n        if(count >0 && (ECSNew ===true || ECNew === true)){\n            elseWhere = true;\n        }\n        ECSP.name = msg.payload[i].EventConditionStateParam;\n        ECSP.isNew = ECSPNew;\n        ECSP.duplicateElseWhere = elseWhere;\n        //onsole.log(\"Checked EventConditionStateParam: \"+ ECSP);\n        EventConditionStateParam.push(ECSP);//For Messages\n    }\n    \n}\nconsole.log(\"Finished Check!\");\n//Messages Related to the stuff set above can be further resolved in intelligence flow/UI...(FUTURE?)\n\n//Final message\n//Prepare Generic Check State\n//console.log(\"Final\");\ncount = undefined;//context.set('count',undefined);\nvar moreInfoPrompt = false;\n//Gather all and set for flow.\noverwrite = {};\noverwrite.EC = EventCondition;\noverwrite.ECState = EventConditionState;\noverwrite.ECStateParam = EventConditionStateParam;\nflow.set(\"overwrite\",overwrite);\n\n//Gather Results, formulate msg.payload\nECstr = \"\";\nif(!overwrite.EC.isNew) ECstr = \"The EventCondition \"+overwrite.EC.name+\" already exists!<br>\";// future: and will be overwritten\nECSstr = \"\";\nfor(var i=0;i<overwrite.ECState.length;i++){//For each EventConditionState\n    element = overwrite.ECState[i];\n    if(!element.isNew){\n        moreInfoPrompt = true;\n        ECSstr = ECSstr +\"The EventConditionState \"+element.name+\" already exists!<br>\";// future: and will be overwritten\n    } \n    if(element.duplicateElseWhere) ECSstr = ECSstr +\"The Event Condition State \"+ element.name+\" is also used by another Event Condition!<br>\";\n}\nECSPstr = \"\";\nfor(var i=0;i<overwrite.ECStateParam.length;i++){//For each EventConditionStateParam\n    element = overwrite.ECState[i];\n    if(!element.isNew){\n        moreInfoPrompt = true;\n        ECSPstr = ECSPstr +\"The EventConditionStateParam \"+element.name+\" already exists!<br>\";// future:  and any changes will be saved\n    } \n    if(element.duplicateElseWhere) ECSPstr = ECSPstr +\"The Event Condition State Parameter \"+element.name+\" is also used by another Event Condition or State!<br>\";\n}\nflow.set(\"readySubmit\",true);//Only if this is true, a Submission can be operated!\ninfoStr = \"\";\nif(moreInfoPrompt){ //Because OVERWRITTING IS NOT READY!!!!\n    infoStr = \"If you don't want to reuse, change the names and the values!<br>\";\n    //flow.set(\"readySubmit\",false);//Only if this is true, a Submission can be operated!\n} \nif(ECSstr ===\"\" && ECSPstr === \"\") ECstr = ECstr +\"States schema is new.<br>\";\nmsg.payload = \"All input seems to be in order!\" + \"<br>\" + ECstr + ECSstr + ECSPstr + infoStr;\n//Warn about logical errors in Data integrity (LATER? ON another flow???).\nreturn msg;\n\n/*\n    //Clean Local Context\n    context.set(\"ECNew\",undefined);\n    context.set(\"ECSNew\",undefined);\n    context.set( \"EventCondition\", undefined);\n    context.set( \"EventConditionState\", undefined);\n    context.set( \"EventConditionStateParam\", undefined);\n*/\n  \n\n\n","outputs":1,"noerr":0,"x":1130,"y":460,"wires":[["7af3c3d5.9b84ec","3aef4bc.891acb4"]]},{"id":"a1cf6d75.dc43a","type":"switch","z":"e76f8aae.095048","name":"","property":"addTripples","propertyType":"msg","rules":[{"t":"true"},{"t":"false"},{"t":"else"}],"checkall":"true","outputs":3,"x":410,"y":420,"wires":[["36f9533.02474ac"],["7af3c3d5.9b84ec"],["e354272c.8aafc8"]]},{"id":"39e43c5.b740ec4","type":"comment","z":"e76f8aae.095048","name":"Same as submit or copy-paste-refactor??","info":"","x":1432.8571428571427,"y":1052.8571428571427,"wires":[]},{"id":"6a90cd35.640184","type":"comment","z":"e76f8aae.095048","name":"Still needs fixing, formulate updater type","info":"","x":347.1428571428571,"y":495.71428571428567,"wires":[]},{"id":"3aef4bc.891acb4","type":"debug","z":"e76f8aae.095048","name":"","active":true,"console":"false","complete":"true","x":1270,"y":480,"wires":[]},{"id":"fa6bd87.402fb28","type":"inject","z":"e76f8aae.095048","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":140,"y":1980,"wires":[["dd74be48.32569"]]},{"id":"50593ddc.73f364","type":"debug","z":"e76f8aae.095048","name":"","active":true,"console":"false","complete":"true","x":470,"y":1980,"wires":[]},{"id":"dd74be48.32569","type":"function","z":"e76f8aae.095048","name":"last whatever...","func":"msg.payload = flow.get(\"triples\");\nmsg.overwrite = flow.get(\"overwrite\");\nreturn msg;","outputs":1,"noerr":0,"x":300,"y":1980,"wires":[["50593ddc.73f364"]]},{"id":"5609dd97.126a34","type":"inject","z":"e76f8aae.095048","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"x":630,"y":20,"wires":[["5bcf7b33.b9e3d4"]]},{"id":"5bcf7b33.b9e3d4","type":"function","z":"e76f8aae.095048","name":"initial-set","func":"//initial booleans\nflow.set(\"isAscending\",false);\nflow.set(\"hasLocation\",false);\nflow.set(\"hasTimestamp\",false);\nreturn msg;\n","outputs":1,"noerr":0,"x":800,"y":20,"wires":[[]]},{"id":"f3149e52.325d9","type":"ui_template","z":"e76f8aae.095048","group":"dc83e135.bd292","name":"Text Area Input ","order":8,"width":0,"height":0,"format":"<script>\n// or overwrite value in your callback function ...\nthis.scope.action = function() { return document.getElementById(\"DashBoardText1\").value; }\n</script>\nInsert JSON Description\n\n<textarea id=\"DashBoardText1\" cols=\"32\" rows=\"25\" ></textarea>\n<md-button ng-click=\"send({payload:action()})\">\n    INSERT AND CHECK\n</md-button>","storeOutMessages":true,"fwdInMessages":false,"templateScope":"local","x":100,"y":820,"wires":[["d2f31ff0.812e4","9049f360.c27e3"]]},{"id":"d2f31ff0.812e4","type":"debug","z":"e76f8aae.095048","name":"","active":true,"console":"false","complete":"true","x":250,"y":860,"wires":[]},{"id":"e354272c.8aafc8","type":"split","z":"e76f8aae.095048","name":"queries","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":540,"y":460,"wires":[["9f01c807.2d8028"]]},{"id":"9b167cc7.be216","type":"join","z":"e76f8aae.095048","name":"","mode":"auto","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"","x":990,"y":460,"wires":[["82417868.05a4c8","2496aed0.a67742"]]},{"id":"9f01c807.2d8028","type":"function","z":"e76f8aae.095048","name":"fix","func":"for (var field in msg.payload){\n    msg[field] = msg.payload[field];\n}\nmsg.payload = \"\";\nreturn msg;","outputs":1,"noerr":0,"x":630,"y":500,"wires":[["22892a7a.4ccd36"]]},{"id":"55e7ed2a.156464","type":"function","z":"e76f8aae.095048","name":"fix","func":"results= msg.payload;\nmsg.payload = {};\nmsg.payload.results = results;\nmsg.payload.query= msg.query;\nif(msg.EventCondition){\n    msg.payload.EventCondition = msg.EventCondition;\n}\nif(msg.EventConditionState){\n    msg.payload.EventConditionState = msg.EventConditionState;\n}\nif(msg.EventConditionStateParam){\n    msg.payload.EventConditionStateParam = msg.EventConditionStateParam;\n}\nfor(var field in msg){\n    if(field !== \"parts\" && field !== \"payload\") delete msg[field];\n}\nreturn msg;","outputs":1,"noerr":0,"x":890,"y":500,"wires":[["9b167cc7.be216"]]},{"id":"2496aed0.a67742","type":"debug","z":"e76f8aae.095048","name":"","active":true,"console":"false","complete":"true","x":1110,"y":500,"wires":[]},{"id":"dc83e135.bd292","type":"ui_group","z":"","name":"Declare Endpoint","tab":"bffc5345.129c4","order":3,"disp":true,"width":"6"},{"id":"3229ec93.a9d434","type":"ui_group","z":"","name":"Submit","tab":"bffc5345.129c4","order":5,"disp":true,"width":"8"},{"id":"f5f162b8.4af87","type":"ui_group","z":"","name":"Declare Event type","tab":"bffc5345.129c4","order":1,"disp":true,"width":"8"},{"id":"713c46c6.8eb4f8","type":"ui_group","z":"","name":"Check Triples","tab":"bffc5345.129c4","order":4,"disp":true,"width":"8"},{"id":"bffc5345.129c4","type":"ui_tab","z":"","name":"AffectUs External Developer","icon":"dashboard","order":6}]